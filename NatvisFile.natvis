<?xml version="1.0" encoding="utf-8"?> 
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
	<!--Compiler-->
	<!--Lexer-->
	<Type Name="Ketl::TokenList">
		<DisplayString>Ketl::TokenList</DisplayString>
		<Expand>
			<LinkedListItems>
				<HeadPointer>_first</HeadPointer>
				<NextPointer>next</NextPointer>
				<ValueNode>*token</ValueNode>
			</LinkedListItems>
		</Expand>
	</Type>
	<!--Parser-->
	<Type Name="Ketl::ProcessStack">
		<DisplayString>Ketl::ProcessStack</DisplayString>
		<Expand>
			<LinkedListItems>
				<HeadPointer>_top</HeadPointer>
				<NextPointer>prev</NextPointer>
				<ValueNode>value</ValueNode>
			</LinkedListItems>
		</Expand>
	</Type>
	<Type Name="Ketl::ProcessNode">
		<DisplayString>{*node}</DisplayString>
		<Expand>
			<Item Name="[node]" ExcludeView="simple">*node</Item>
			<Item Name="[state]" Condition="firstChild == nullptr" ExcludeView="simple">state</Item>
			<Item Name="[parent]" Condition="firstChild == nullptr" ExcludeView="simple">parent</Item>
			<Item Name="[iterator]" Condition="firstChild == nullptr" ExcludeView="simple">iterator</Item>
			<LinkedListItems>
				<HeadPointer>firstChild</HeadPointer>
				<NextPointer>nextSibling</NextPointer>
				<ValueNode>*this</ValueNode>
			</LinkedListItems>
		</Expand>
	</Type>
	<Type Name="Ketl::BnfIterator">
		<DisplayString>{_it._node->token->value._Mydata + _itOffset, [_it._node->token->value._Mysize]na}</DisplayString>
		<Expand>
			<Item Name="[it]" ExcludeView="simple">_it</Item>
			<Item Name="[offset]" ExcludeView="simple">_itOffset</Item>
		</Expand>
	</Type>
	<!--ParserBnfNodes-->
	<Type Name="Ketl::NodeLeaf">
		<DisplayString Condition="_type == Ketl::NodeLeaf::Type::Id">Id</DisplayString>
		<DisplayString Condition="_type == Ketl::NodeLeaf::Type::Number">Number</DisplayString>
		<DisplayString Condition="_type == Ketl::NodeLeaf::Type::String">String</DisplayString>
		<Expand>
			<Item Name="[type]" ExcludeView="simple">_type</Item>
		</Expand>
	</Type>
	<Type Name="Ketl::NodeLiteral">
		<DisplayString>{_value._Mydata, na}</DisplayString>
		<Expand>
			<Item Name="[id]" ExcludeView="simple">_value</Item>
		</Expand>
	</Type>
	<Type Name="Ketl::NodeId">
		<DisplayString>{_id._Mydata, na} ({*_node})</DisplayString>
		<Expand>
			<Item Name="[node]" ExcludeView="simple">*_node</Item>
			<Item Name="[id]" ExcludeView="simple">_id</Item>
		</Expand>
	</Type>
	<Type Name="Ketl::NodeConcat">
		<DisplayString>Concat</DisplayString>
		<Expand>
			<Item Name="[size]" ExcludeView="simple">_children._Mypair._Myval2._Mylast - _children._Mypair._Myval2._Myfirst</Item>
			<IndexListItems>
				<Size>_children._Mypair._Myval2._Mylast - _children._Mypair._Myval2._Myfirst</Size>
				<ValueNode>*(_children._Mypair._Myval2._Myfirst[$i])</ValueNode>
			</IndexListItems>
		</Expand>
	</Type>
	<Type Name="Ketl::NodeOr">
		<DisplayString>Or</DisplayString>
		<Expand>
			<Item Name="[size]" ExcludeView="simple">_children._Mypair._Myval2._Mylast - _children._Mypair._Myval2._Myfirst</Item>
			<IndexListItems>
				<Size>_children._Mypair._Myval2._Mylast - _children._Mypair._Myval2._Myfirst</Size>
				<ValueNode>*(_children._Mypair._Myval2._Myfirst[$i])</ValueNode>
			</IndexListItems>
		</Expand>
	</Type>
	<Type Name="Ketl::NodeConditional">
		<DisplayString Condition="_children._Mypair._Myval2._Mylast - _children._Mypair._Myval2._Myfirst != 1">Conditional</DisplayString>
		<DisplayString Condition="_children._Mypair._Myval2._Mylast - _children._Mypair._Myval2._Myfirst == 1">Conditional ({**(_children._Mypair._Myval2._Myfirst)})</DisplayString>
		<Expand>
			<Item Condition="_children._Mypair._Myval2._Mylast - _children._Mypair._Myval2._Myfirst != 1" 
				  Name="[size]" ExcludeView="simple">_children._Mypair._Myval2._Mylast - _children._Mypair._Myval2._Myfirst</Item>
			<IndexListItems Condition="_children._Mypair._Myval2._Mylast - _children._Mypair._Myval2._Myfirst != 1">
				<Size>_children._Mypair._Myval2._Mylast - _children._Mypair._Myval2._Myfirst</Size>
				<ValueNode>*(_children._Mypair._Myval2._Myfirst[$i])</ValueNode>
			</IndexListItems>
			<Item Condition="_children._Mypair._Myval2._Mylast - _children._Mypair._Myval2._Myfirst == 1" 
				  Name="[node]" ExcludeView="simple">**(_children._Mypair._Myval2._Myfirst)</Item>
		</Expand>
	</Type>
	<Type Name="Ketl::NodeRepeat">
		<DisplayString>Repeat ({*_node})</DisplayString>
		<Expand>
			<Item Name="[node]" ExcludeView="simple">*_node</Item>
		</Expand>
	</Type>
	
	<!--Ketl-->
	<Type Name="Ketl::Instruction">
		<DisplayString>{code}</DisplayString>
		<Expand>
			<Item Name="[code]" ExcludeView="simple">code</Item>
			<CustomListItems>
				<Variable Name="i" InitialValue="1" />

				<Loop>
					<If Condition="i > Ketl::Instruction::CodeSizes[static_cast&lt;uint8_t&gt;(code)] - 1">
						<Break/>
					</If>
					<Item Condition="_argumentTypes[i] == Ketl::Argument::Type::Stack" Name="[{i - 1} stack]">(this + i)->_argument.stack</Item>
					<Item Condition="_argumentTypes[i] == Ketl::Argument::Type::Global" Name="[{i - 1} global]">(this + i)->_argument.globalPtr</Item>
					<Item Condition="_argumentTypes[i] == Ketl::Argument::Type::Literal" Name="[{i - 1} literal]">(this + i)->_argument</Item>
					<Item Condition="_argumentTypes[i] == Ketl::Argument::Type::FunctionParameter" Name="[{i - 1} parameter]">(this + i)->_argument.stack</Item>
					<Item Condition="_argumentTypes[i] == Ketl::Argument::Type::None" Name="[{i - 1} empty]">"empty"</Item>
					<Exec>++i</Exec>
				</Loop>
			</CustomListItems>
		</Expand>
	</Type>
	<Type Name="Ketl::FunctionObject">
		<DisplayString>Ketl::FunctionObject</DisplayString>
		<Expand>
			<Item Name="[stackSize]" ExcludeView="simple">_stackSize</Item>
			<Item Condition="_instructions" Name="[count]" ExcludeView="simple">_instructionsCount</Item>
			<CustomListItems>
				<Variable Name="it" InitialValue="_instructions"/>
				<Variable Name="i" InitialValue="0" />
				<Variable Name="counter" InitialValue="0" />

				<Loop>
					<If Condition="i >= _instructionsCount">
						<Break/>
					</If>
					<Item Name="[{counter}] ({i})">*it</Item>
					<Exec>++counter</Exec>
					<Exec>i += Ketl::Instruction::CodeSizes[static_cast&lt;uint8_t&gt;(it->code)]</Exec>
					<Exec>it += Ketl::Instruction::CodeSizes[static_cast&lt;uint8_t&gt;(it->code)]</Exec>
				</Loop>
			</CustomListItems>
		</Expand>
	</Type>
	<Type Name="Ketl::FunctionContainer">
		<DisplayString>Ketl::FunctionContainer</DisplayString>
		<Expand>
			<Item Name="[count]" ExcludeView="simple">functionsCount</Item>
			<ArrayItems>
				<Size>functionsCount</Size>
				<ValuePointer>functions</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	<Type Name="Ketl::StandaloneFunction">
		<DisplayString>{ _function }</DisplayString>
		<Expand>
			<ExpandedItem>_function</ExpandedItem>
		</Expand>
	</Type>
</AutoVisualizer>