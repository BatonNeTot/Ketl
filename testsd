			"non-zero-digit='1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'."
			"zero='0'."
			"digit=zero|non-zero-digit."
			"integer=non-zero-digit{digit}."
			"float-number=[non-zero-digit{digit}|zero]'.'digit{digit}."
			"NUMBER$=integer|float-number."

			"lower-alphabet='a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|'y'|'z'."
			"upper-alphabet='A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|'M'|'N'|'O'|'P'|'Q'|'R'|'S'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z'."
			"id-first-symbol='_'|lower-alphabet|upper-alphabet."
			"id-symbol=digit|id-first-symbol."
			"ID$=id-first-symbol{id-symbol}."

			"space ~= {' '|'\f'|'\n'|'\r'|'\t'|'\v'}."

			"type-extra-arguments = ',' type-arguments| ''."
			"type-arguments = type type-extra-arguments."
			"type $= ID | ID '(' (type-arguments | '')')'."
			"define-id = type ID | ID."

			"function-declaration-argument = type | type ID."
			"function-declaration-extra-arguments = ',' function-declaration-arguments| ''."
			"function-declaration-arguments = function-declaration-argument function-declaration-extra-arguments."
			"function-declaration = type ID '(' (function-declaration-arguments | '') ')'."
			"function-definition = function-declaration brackets-commands."

			"primary = ID | NUMBER | STRING | '(' expression ')'."

			"function-extra-arguments = ',' function-arguments | ''."
			"function-arguments = primary function-extra-arguments."
			"precedence-1-operator = '(' (function-arguments | '') ')'."
			"precedence-1-expression = primary precedence-1-operator."

			"precedence-2-operator = '*' | '/'."
			"precedence-2-extra = precedence-2-operator precedence-2-expression | ''."
			"precedence-2-expression = precedence-1-expression precedence-2-extra."

			"precedence-3-operator = '+' | '-'."
			"precedence-3-extra = precedence-3-operator precedence-3-expression | ''."
			"precedence-3-expression = precedence-2-expression precedence-3-extra."

			"precedence-4-operator = '==' | '!='."
			"precedence-4-extra = precedence-4-operator precedence-4-expression | ''."
			"precedence-4-expression = precedence-3-expression precedence-4-extra."

			"precedence-5-operator = '='."
			"precedence-5-extra = precedence-5-operator precedence-5-expression | ''."
			"precedence-5-expression = precedence-4-expression precedence-5-extra."

			"expression = precedence-4-expression."
			"command =  (expression | '') ';' | function-definition | brackets-commands."

			"brackets-commands = '{' several-commands '}'."
			"several-commands = command several-commands | ''."
			"block = brackets-commands | command."

			"test1 = {something}."
			"test2 = something test2 | ''."

			"test1 = [something]."
			"test2 = something | ''."

			strcmp(id->_value._Mypair._Myval2._Bx._Buf, "command") == 0

"{\n\tint test(int x) {\n\t\ttestMe = x + 1;\n\t}\n\n\ttestValue= (4 + 5 + 6)* 3;\n\ttestValue2 = testValue / 9;\n}"